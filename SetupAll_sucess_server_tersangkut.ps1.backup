# ==================================================================================
# SETUP BACKEND â€” PowerShell Modular Installer (Versi Deteksi Output StartPostgres)
# ==================================================================================

$StatusDir = "C:\EvoParkBE\status"
$LogFile   = "$StatusDir\setup.log"

$Steps = @(
    @{ File = "installBE.bat";     Key = "installBE" },
    @{ File = "installDB.bat";     Key = "installDB" },
    @{ File = "initDB.bat";        Key = "initDB" },
    @{ File = "StartPostgres.bat"; Key = "StartPostgres" },
    @{ File = "settingDB.bat";     Key = "settingDB" },
    @{ File = "importDB.bat";      Key = "importDB" },
    @{ File = "startServer.bat";   Key = "startServer" }
)

# ========== Inisialisasi ==========
if (-Not (Test-Path $StatusDir)) {
    New-Item -ItemType Directory -Path $StatusDir | Out-Null
}
"[STATUS] Setup dimulai: $(Get-Date)" | Out-File -FilePath $LogFile

# ========== Eksekusi Modular ==========
foreach ($step in $Steps) {
    $stepFile  = Join-Path $StatusDir "$($step.Key).done"
    $stepLabel = $step.Key
    $stepPath  = Join-Path $PSScriptRoot $step.File

    if ((Test-Path $stepFile) -and ($step["Key"] -ne "StatusPostgres")) {
        "[STATUS] $stepLabel sudah selesai." | Out-File $LogFile -Append
        Write-Host "[STATUS] $stepLabel dilewati (sudah selesai)."
        continue
    }

    "[STATUS] Menjalankan tahap: $stepLabel" | Out-File $LogFile -Append
    Write-Host "[STATUS] Menjalankan $step.File ..."

    try {
        $isSuccess = $false

        if ($stepLabel -eq "StartPostgres") {
            $output = & $stepPath 2>&1

            if ($output -match "127\." -or $output -match "Postgres sudah aktif") {
                "[STATUS] Deteksi berhasil: ditemukan '127' atau 'Postgres sudah aktif'." | Out-File $LogFile -Append
                Write-Host "[STATUS] StartPostgres sukses, lanjut ke tahap berikutnya."
                $isSuccess = $true
            } else {
                throw "[ERROR] Tidak ditemukan '127' atau 'Postgres sudah aktif' dalam output StartPostgres."
            }

        } else {
            $process = Start-Process -FilePath $stepPath -Wait -PassThru -NoNewWindow
            if ($process.ExitCode -eq 0) {
                $isSuccess = $true
            } else {
                throw "[ERROR] Tahap $stepLabel gagal dengan kode: $($process.ExitCode)"
            }
        }

        if ($isSuccess) {
            Get-Date | Out-File $stepFile
            "[STATUS] $stepLabel selesai." | Out-File $LogFile -Append
            Write-Host "[STATUS] $stepLabel selesai."
        }
    }
    catch {
        "[ERROR] $stepLabel gagal: $_" | Out-File $LogFile -Append
        Write-Host "[ERROR] ERROR di $stepLabel. Proses dihentikan. <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
        if ($process) {
            Write-Host "[DEBUG] Exit code untuk $stepLabel = $($process.ExitCode) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
        }
        exit 1
    }
}

# ========== Validasi Output Server (StartPostgres, settingDB, importDB wajib selesai) ==========





# ========== Selesai ==========
"[STATUS] Semua tahapan selesai: $(Get-Date)" | Out-File $LogFile -Append
Write-Host "`n[STATUS] Semua proses instalasi backend selesai."

exit 0
